# Default values for bso-project.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: trace-analyzer
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

environmentVariables:
    - name: INFLUXDB2_TOKEN
      valueFrom:
        secretKeyRef:
          name: token-secret
          key: token
ingress-nginx:
  controller:
    config:
      enable-opentelemetry: "true"
      opentelemetry-config: "/etc/nginx/opentelemtry.toml"
      opentelemetry-operation-name: "HTTP $request_method $service_name $uri"
      OpentelemetryTrustIncomingSpan: "true"
      otlp-collector-host: "opentelemetry-collector"
      otlp-collector-port: "4317"
      otel-max-queuesize: "2048"
      otel-schedule-delay-millis: "5000"
      otel-max-export-batch-size: "512"
      otel-service-name: "nginx-proxy"
      otel-sampler: "AlwaysOn"
      otel-sampler-ratio: "1.0"
      otel-sampler-parent-based: "false"
    opentelemetry:
      enabled: true
opentelemetry-collector:
  image:
    repository: "otel/opentelemetry-collector-contrib"
  mode: daemonset
  config:
    exporters:
      influxdb:
        endpoint: "http://influxdb-influxdb2/"
        token: ${INFLUXDB2_TOKEN}
        metrics_schema: telegraf-prometheus-v2
        bucket: otel
        org: influxdata
        sending_queue:
          enabled: true
          num_consumers: 3
          queue_size: 10
        retry_on_failure:
          enabled: true
          initial_interval: 1s
          max_interval: 3s
          max_elapsed_time: 10s
    service:
      pipelines:
        logs:
          exporters:
            - influxdb
            - debug
        traces:
          exporters:
            - influxdb
            - debug
        metrics:
          exporters:
            - influxdb
            - debug
  ports:
    metrics:
      enabled: true
  presets:
    kubernetesAttributes:
      enabled: true
    kubeletMetrics:
      enabled: true
    logsCollection:
      enabled: true
      includeCollectorLogs: true
  # podMonitor:
  #   enabled: true
  serviceMonitor:
    enabled: true
  # resources:
  #   limits:
  #     cpu: 500m
  #     memory: 2Gi
  #   requests:
  #     cpu: 200m
  #     memory: 400Mi

influxdb2:
  adminUser:
    organization: influxdata
    bucket: otel
    user: admin
    existingSecret: token-secret

grafana:
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
      - name: InfluxDB
        type: influxdb
        access: proxy
        url: http://influxdb-influxdb2:8086
        jsonData:
          version: Flux
          organization: influxdata
          defaultBucket: otel
          tlsSkipVerify: true
        secureJsonData:
          token: ${INFLUXDB2_TOKEN}
  ingress:
    enabled: true
    hosts:
      - example.com
    path: /grafana
    ingressClassName: nginx
  persistance:
    enabled: true
  grafana.ini:
    domain: example.com
    root_url: "%(protocol)s://%(domain)s/grafana"
    serve_from_sub_path: true
