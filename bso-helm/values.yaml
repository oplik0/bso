# Default values for bso-project.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: trace-analyzer
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80


env:
  - name: DISCORD_WEBHOOK
    value: https://discord.com/api/webhooks/123456789/abcdefg
ingress-nginx:
  controller:
    config:
      enable-opentelemetry: "true"
      opentelemetry-config: "/etc/nginx/opentelemtry.toml"
      opentelemetry-operation-name: "HTTP $request_method $service_name $uri"
      OpentelemetryTrustIncomingSpan: "true"
      otlp-collector-host: "bso-opentelemetry-collector"
      otlp-collector-port: "4317"
      otel-max-queuesize: "2048"
      otel-schedule-delay-millis: "5000"
      otel-max-export-batch-size: "512"
      otel-service-name: "nginx-proxy"
      otel-sampler: "AlwaysOn"
      otel-sampler-ratio: "1.0"
      otel-sampler-parent-based: "false"
    opentelemetry:
      enabled: true
opentelemetry-collector:
  image:
    repository: otel/opentelemetry-collector-contrib
  mode: statefulset
  enabled: true
  config:
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318
    exporters:
      influxdb:
        endpoint: "http://bso-influxdb2"
        token: '{{- $influxDBSecret := (lookup "v1" "Secret" .Release.Namespace "influxdb-auth").data }}{{- $influxDBToken := (get $influxDBSecret "admin-token") | b64dec }}{{ $influxDBToken }}'
        metrics_schema: telegraf-prometheus-v2
        bucket: otel
        org: influxdata
        sending_queue:
          enabled: true
          num_consumers: 3
          queue_size: 10
        retry_on_failure:
          enabled: true
          initial_interval: 1s
          max_interval: 3s
          max_elapsed_time: 10s
      otlp:
        endpoint: "http://bso-tempo:4317"
        tls:
          insecure: true
      otlp/2:
        endpoint: "http://bso-prometheus-server:4317"
    service:
      pipelines:
        logs:
          exporters:
            - influxdb
            - debug
            - otlp/2
          receivers:
            - otlp
          processors:
            - batch
            - memory_limiter
        traces:
          exporters:
            - influxdb
            - otlp
            - debug
            - otlp/2
          receivers:
            - otlp
          processors:
            - batch
            - memory_limiter
        metrics:
          exporters:
            - influxdb
            - debug
            - otlp
            - otlp/2
          receivers:
            - otlp
          processors:
            - batch
            - memory_limiter
  presets:
    kubernetesAttributes:
      enabled: true
    kubeletMetrics:
      enabled: true
    logsCollection:
      enabled: true
      includeCollectorLogs: true
opentelemetry-kube-stack:
  opentelemetry-operator:
    enabled: true
    manager:
      collectorImage:
        repository: otel/opentelemetry-collector-contrib
    admissionWebhooks:
      certManager:
        enabled: false
      autoGenerateCert:
        enabled: true
    
    # ports:
    # metrics:
    #   enabled: true
  # podMonitor:
  #   enabled: true
  
  # resources:
  #   limits:
  #     cpu: 500m
  #     memory: 2Gi
  #   requests:
  #     cpu: 200m
  #     memory: 400Mi

influxdb2:
  adminUser:
    organization: influxdata
    bucket: otel
    user: admin
    retentionPolicy: 365d
    token: "testtoken"
    existingSecret: influxdb-auth

grafana:
  envFromSecret: influxdb-auth
  admin:
    existingSecret: "grafana"
    userKey: username
    passwordKey: password
  smtp:
    existingSecret: email
  dashboards:
    default:
      main:
        json: |
          {
            "annotations": {
              "list": [
                {
                  "builtIn": 1,
                  "datasource": {
                    "type": "grafana",
                    "uid": "-- Grafana --"
                  },
                  "enable": true,
                  "hide": true,
                  "iconColor": "rgba(0, 211, 255, 1)",
                  "name": "Annotations & Alerts",
                  "type": "dashboard"
                }
              ]
            },
            "editable": true,
            "fiscalYearStartMonth": 0,
            "graphTooltip": 0,
            "links": [],
            "panels": [
              {
                "datasource": {
                  "type": "tempo",
                  "uid": "tempo"
                },
                "gridPos": {
                  "h": 21,
                  "w": 9,
                  "x": 0,
                  "y": 0
                },
                "id": 1,
                "options": {
                  "edges": {},
                  "nodes": {}
                },
                "targets": [
                  {
                    "datasource": {
                      "type": "tempo",
                      "uid": "tempo"
                    },
                    "limit": 20,
                    "queryType": "serviceMap",
                    "refId": "A",
                    "tableType": "traces"
                  }
                ],
                "title": "Services",
                "type": "nodeGraph"
              },
              {
                "datasource": {
                  "type": "prometheus",
                  "uid": "prom"
                },
                "fieldConfig": {
                  "defaults": {
                    "color": {
                      "mode": "continuous-GrYlRd"
                    },
                    "custom": {
                      "axisBorderShow": false,
                      "axisCenteredZero": false,
                      "axisColorMode": "text",
                      "axisLabel": "",
                      "axisPlacement": "auto",
                      "barAlignment": 0,
                      "drawStyle": "line",
                      "fillOpacity": 20,
                      "gradientMode": "scheme",
                      "hideFrom": {
                        "legend": false,
                        "tooltip": false,
                        "viz": false
                      },
                      "insertNulls": false,
                      "lineInterpolation": "smooth",
                      "lineWidth": 3,
                      "pointSize": 5,
                      "scaleDistribution": {
                        "type": "linear"
                      },
                      "showPoints": "auto",
                      "spanNulls": false,
                      "stacking": {
                        "group": "A",
                        "mode": "none"
                      },
                      "thresholdsStyle": {
                        "mode": "off"
                      }
                    },
                    "mappings": [],
                    "thresholds": {
                      "mode": "absolute",
                      "steps": [
                        {
                          "color": "green",
                          "value": null
                        },
                        {
                          "color": "red",
                          "value": 80
                        }
                      ]
                    }
                  },
                  "overrides": []
                },
                "gridPos": {
                  "h": 7,
                  "w": 15,
                  "x": 9,
                  "y": 0
                },
                "id": 2,
                "options": {
                  "legend": {
                    "calcs": [],
                    "displayMode": "hidden",
                    "placement": "right",
                    "showLegend": false
                  },
                  "tooltip": {
                    "maxHeight": 600,
                    "mode": "single",
                    "sort": "none"
                  }
                },
                "targets": [
                  {
                    "datasource": {
                      "type": "prometheus",
                      "uid": "prom"
                    },
                    "disableTextWrap": false,
                    "editorMode": "builder",
                    "expr": "{status=\"error\"}",
                    "fullMetaSearch": false,
                    "includeNullMetadata": true,
                    "instant": false,
                    "legendFormat": "__auto",
                    "range": true,
                    "refId": "A",
                    "useBackend": false
                  }
                ],
                "title": "Errors",
                "type": "timeseries"
              },
              {
                "datasource": {
                  "type": "prometheus",
                  "uid": "prom"
                },
                "fieldConfig": {
                  "defaults": {
                    "color": {
                      "mode": "continuous-GrYlRd"
                    },
                    "custom": {
                      "axisBorderShow": false,
                      "axisCenteredZero": false,
                      "axisColorMode": "text",
                      "axisLabel": "",
                      "axisPlacement": "auto",
                      "barAlignment": 0,
                      "drawStyle": "line",
                      "fillOpacity": 20,
                      "gradientMode": "scheme",
                      "hideFrom": {
                        "legend": false,
                        "tooltip": false,
                        "viz": false
                      },
                      "insertNulls": false,
                      "lineInterpolation": "smooth",
                      "lineWidth": 3,
                      "pointSize": 5,
                      "scaleDistribution": {
                        "type": "linear"
                      },
                      "showPoints": "auto",
                      "spanNulls": false,
                      "stacking": {
                        "group": "A",
                        "mode": "none"
                      },
                      "thresholdsStyle": {
                        "mode": "off"
                      }
                    },
                    "mappings": [],
                    "thresholds": {
                      "mode": "absolute",
                      "steps": [
                        {
                          "color": "green",
                          "value": null
                        },
                        {
                          "color": "red",
                          "value": 80
                        }
                      ]
                    },
                    "unit": "ms"
                  },
                  "overrides": []
                },
                "gridPos": {
                  "h": 14,
                  "w": 15,
                  "x": 9,
                  "y": 7
                },
                "id": 3,
                "options": {
                  "legend": {
                    "calcs": [],
                    "displayMode": "hidden",
                    "placement": "right",
                    "showLegend": false
                  },
                  "tooltip": {
                    "maxHeight": 600,
                    "mode": "single",
                    "sort": "none"
                  }
                },
                "targets": [
                  {
                    "datasource": {
                      "type": "prometheus",
                      "uid": "prom"
                    },
                    "disableTextWrap": false,
                    "editorMode": "builder",
                    "expr": "traces_spanmetrics_latency_sum{span_kind=\"SPAN_KIND_SERVER\"}",
                    "fullMetaSearch": false,
                    "includeNullMetadata": false,
                    "instant": false,
                    "legendFormat": "{{service}}",
                    "range": true,
                    "refId": "A",
                    "useBackend": false
                  }
                ],
                "title": "Response latency",
                "type": "timeseries"
              }
            ],
            "refresh": "",
            "schemaVersion": 39,
            "tags": [],
            "templating": {
              "list": []
            },
            "time": {
              "from": "now-5m",
              "to": "now"
            },
            "timeRangeUpdatedDuringEditOrView": false,
            "timepicker": {},
            "timezone": "browser",
            "title": "Main Dashboard",
            "uid": "bdomua3ewtptsc",
            "version": 1,
            "weekStart": ""
          }
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
      - name: 'default'
        orgId: 1
        folder: ''
        type: file
        disableDeletion: false
        editable: true
        options:
          path: /var/lib/grafana/dashboards/default

  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
      - name: InfluxDB
        type: influxdb
        access: proxy
        url: http://bso-influxdb2
        jsonData:
          version: Flux
          organization: influxdata
          defaultBucket: otel
          tlsSkipVerify: true
        secureJsonData:
          token: ${admin-token}
      - name: Tempo
        type: tempo
        access: proxy
        uid: tempo
        url: http://bso-tempo:3100
        jsonData:
          tlsSkipVerify: true
          tracesToMetrics:
            datasourceUid: prom
            spanStartTimeShift: '1h'
            spanEndTimeShift: '-1h'
            tags: [{ key: 'service.name', value: 'service' }, { key: 'job' }]
          serviceMap:
            datasourceUid: 'prom'
          nodeGraph:
            enabled: true
      - name: Prometheus
        type: prometheus
        access: proxy
        uid: prom
        url: http://bso-prometheus-server
        jsonData:
          tlsSkipVerify: true
  ingress:
    enabled: true
    hosts:
      - '{{ .Values.domain }}'
    ingressClassName: nginx
  persistance:
    enabled: true
  grafana.ini:
    root_url: "%(protocol)s://%(domain)s"
    serve_from_sub_path: true
    smtp:
      enabled: true
      host: '{{ .Values.email.host }}'
      from_address: '{{ .Values.email.from_address }}'
  alerting:
    rules.yaml:
      apiVersion: 1
      groups:
          - orgId: 1
            name: alerts
            folder: alerts
            interval: 1m
            rules:
              - uid: latency
                title: Latency
                condition: C
                data:
                  - refId: A
                    relativeTimeRange:
                      from: 600
                      to: 0
                    datasourceUid: prom
                    model:
                      datasource:
                          type: prometheus
                          uid: prom
                      disableTextWrap: false
                      editorMode: builder
                      exemplar: false
                      expr: sum by(le) (rate(traces_spanmetrics_latency_sum{span_kind="SPAN_KIND_SERVER"}[$__rate_interval]))
                      fullMetaSearch: false
                      hide: false
                      includeNullMetadata: false
                      instant: false
                      intervalMs: 1000
                      legendFormat: __auto
                      maxDataPoints: 43200
                      range: true
                      refId: A
                      useBackend: false
                  - refId: B
                    relativeTimeRange:
                      from: 600
                      to: 0
                    datasourceUid: __expr__
                    model:
                      conditions:
                          - evaluator:
                              params:
                                  - 0
                                  - 0
                              type: gt
                            operator:
                              type: and
                            query:
                              params: []
                            reducer:
                              params: []
                              type: avg
                            type: query
                      datasource:
                          name: Expression
                          type: __expr__
                          uid: __expr__
                      expression: A
                      hide: false
                      intervalMs: 1000
                      maxDataPoints: 43200
                      reducer: last
                      refId: B
                      settings:
                          mode: dropNN
                      type: reduce
                  - refId: C
                    relativeTimeRange:
                      from: 600
                      to: 0
                    datasourceUid: __expr__
                    model:
                      conditions:
                          - evaluator:
                              params:
                                  - 100
                                  - 0
                              type: gt
                            operator:
                              type: and
                            query:
                              params: []
                            reducer:
                              params: []
                              type: avg
                            type: query
                            unloadEvaluator:
                              params:
                                  - 100
                                  - 0
                              type: lt
                      datasource:
                          name: Expression
                          type: __expr__
                          uid: __expr__
                      expression: B
                      hide: false
                      intervalMs: 1000
                      maxDataPoints: 43200
                      refId: C
                      type: threshold
                noDataState: NoData
                execErrState: Error
                for: 5m
                annotations:
                  summary: High latency detected
                labels: {}
                isPaused: false
                notification_settings:
                  receiver: admin
              - uid: failures
                title: Failure Rate
                condition: C
                data:
                  - refId: A
                    relativeTimeRange:
                      from: 60
                      to: 0
                    datasourceUid: prom
                    model:
                      datasource:
                          type: prometheus
                          uid: prom
                      disableTextWrap: false
                      editorMode: builder
                      expr: sum by(client, server) (rate(traces_service_graph_request_failed_total[$__rate_interval]))
                      fullMetaSearch: false
                      hide: false
                      includeNullMetadata: true
                      instant: false
                      intervalMs: 1000
                      legendFormat: __auto
                      maxDataPoints: 43200
                      range: true
                      refId: A
                      useBackend: false
                  - refId: C
                    relativeTimeRange:
                      from: 60
                      to: 0
                    datasourceUid: __expr__
                    model:
                      conditions:
                          - evaluator:
                              params:
                                  - 0.25
                              type: gt
                            operator:
                              type: and
                            query:
                              params:
                                  - C
                            reducer:
                              params: []
                              type: last
                            type: query
                            unloadEvaluator:
                              params:
                                  - 0.05
                              type: lt
                      datasource:
                          type: __expr__
                          uid: __expr__
                      expression: B
                      intervalMs: 1000
                      maxDataPoints: 43200
                      refId: C
                      type: threshold
                  - refId: B
                    relativeTimeRange:
                      from: 60
                      to: 0
                    datasourceUid: __expr__
                    model:
                      conditions:
                          - evaluator:
                              params:
                                  - 0
                                  - 0
                              type: gt
                            operator:
                              type: and
                            query:
                              params: []
                            reducer:
                              params: []
                              type: avg
                            type: query
                      datasource:
                          name: Expression
                          type: __expr__
                          uid: __expr__
                      expression: A
                      hide: false
                      intervalMs: 1000
                      maxDataPoints: 43200
                      reducer: max
                      refId: B
                      type: reduce
                noDataState: NoData
                execErrState: Error
                for: 5m
                annotations: {}
                labels: {}
                isPaused: false
                notification_settings:
                  receiver: admin
    contactpoints.yaml:
      secret:
        apiVersion: 1
        contactPoints:
          - orgId: 1
            name: admin
            receivers:
              - uid: admin
                name: admin
                type: email
                settings:
                  addresses: '{{ .Values.email.address }}'
              - uid: discord
                name: discord
                type: discord
                settings:
                  url: '{{ .Values.discord.url }}'

tempo:
  persistence:
    enabled: true
  tempo:
    metricsGenerator:
      enabled: true
      # sadly not template-enabled!
      remoteWriteUrl: http://bso-prometheus-server/api/v1/write


prometheus:
  server:
    extraFlags:
      - web.enable-lifecycle
      - web.enable-remote-write-receiver
      - enable-feature=otlp-write-receiver
    service:
      additionalPorts:
        - name: otlp
          port: 4317
          targetPort: 4317